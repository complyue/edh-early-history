
// Some fancy chars can be used in operators
//
// 🔀🔁🔂⏩⏪🔼⏫🔽⏬⏹️
// 🌀📢📣🔔🔕🎵⭕
// 🆔🆘🆚

{

  operator 📣 5 (lhv, rhv) {
    runtime.info <| rhv ++ ' is telling ' ++ lhv
  }

  operator 🆚 9 (lhv, rhv) {
    runtime.info <| "🌀 What's the difference?\n     " ++ lhv ++ '\n  🆚\n     ' ++ rhv
  }

}

'a tale' 📣 'the goat'

let (a, b) = ( 'Orange', 'Apple', )
a 🆚 b


{

  method localOverrides * {
    // overide the (++) operator within this procedure only, avoid
    // polluting the module scope

    scopeHere = scope() // use the reflective `scope` utility
    testExpr = makeExpr( 'You' ++ ' and ' ++ 'me' )

    before = scopeHere.eval(testExpr)
    operator ++ (lhv, rhv) {
      // inside the overriding operator definition, the overridden,
      // original operator is available as was before the overide
      lhv ++ ' ⭕ ' ++ rhv
    }
    after = scopeHere.eval(testExpr)

    before 🆚 after
  }

}

localOverrides()
