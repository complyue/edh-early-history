
{
  case 3:2:1 of {
    { x:y } -> 'pair pattern matches the length'
    { x:y:z } -> 'so this one fires'
  }
}

case 3:2 of { (x:y) } -> 'the pair pattern can be parenthesised'

case 3*7-5 of { result } -> 'a wild capture pattern receives the ' ++ result

case [7, 3, 5] of { head => tail } -> 'snoc pattern does snoc, got ' ++ (head, tail)

case (3, 5, 7) of { (x, y, z) } -> 'tuple pattern matches the length'

case (3, 5, 7) of { (x, y) } -> 'tuple pattern matches the length'

class B () pass
class C () extends B()
c = C()

case c of {{ B:b }} -> 'instance resolving pattern obtains the right super instance: ' ++ b

