
  # resembles `range` in Python
  generator range(start, stop=nil, step=nil) {

    if nil == stop && nil == step then case start of {
      # enable the hidden *Edhic* version of `range` using pair
      {(start:stop:step)} -> {fallthrough}
      {(start:stop)} -> {fallthrough}
    }

    if nil == stop then let (stop, start) = (start, 0)
    start == stop -> return nil
    n = start
    
    start < stop -> {
      if nil == step
        then step = 1
        else if step <= 0 then {
          runtime.warn <| 'step of ' ++ step ++ ' for range [' ++
                          start ++ ', ' ++ stop ++ ") won't converge"
          return nil
        }
      while n < stop {
        yield n
        n += step
      }
    }

    start > stop -> {
      if nil == step
        then step = -1
        else if step >= 0 then {
          runtime.warn <| 'step of ' ++ step ++ ' for range [' ++
                          start ++ ', ' ++ stop ++ ") won't converge"
          return nil
        }
      while n > stop {
        yield n
        n += step
      }
    }
  }

  {#
   resembles `enumerate` in Python
  
   enumerating tuple/list/dict is quite the same, but to enumerate
   a generator, you need to pass the generator proc here followed by
   its args, instead of calling it your self. as generators in Edh
   can only be call by a for-from-do loop.
  #}
  generator enumerate(g, ***gargs) {
    n = 0
    case type(g) of {

      GeneratorType -> for i from g(***gargs) do {
        yield pkargs(n, i)
        n += 1
      }

      if not null(gargs) then
        runtime.warn <| '`enumerate` can hanle one series only'

      _ -> for i from g do {
        yield pkargs(n, i)
        n += 1
      }

    }
  }

  # resembles `zip` in Haskell
  generator zip(xs, ys) {
    while true case xs of {
      {x => xs} -> case ys of {
        {y => ys} -> {
          yield pkargs(x, y)
        } return nil
      } return nil
    }
  }

  # resembles `zip3` in Haskell
  generator zip3(xs, ys, zs) {
    while true case xs of {
      {x => xs} -> case ys of {
        {y => ys} -> case zs of {
          {z => zs} -> {
            yield pkargs(x, y, z)
          } return nil
        } return nil
      } return nil
    }
  }
